cutpoint<-res.cut$cutpoint[1,1]
#Train KM
train_df$CPoints<-train_df$points
train_df$CPoints[train_df$CPoints <=cutpoint] <- 0
train_df$CPoints[train_df$CPoints >cutpoint] <- 1
# write.xlsx(train_df, 'D:\\Data analysis\\Survival_analysis\\SYSU_Cancer_HCC\\result_sorting\\risk_layered\\clinical_dl_train.xlsx')
fml_KM1<-survfit(TrainSurv~CPoints,data=train_df)
x11()
ggsurvplot(fml_KM1,surv.median.line = "hv",conf.int = TRUE,
legend.labs = c("low-risk", "high-risk"),pval=TRUE,
ylab="Survival probability (percentage)",xlab = " Time (Months)",
legend.title="Training cohort")
# TEST KM
test_df$CPoints<-test_df$points
test_df$CPoints[test_df$CPoints <cutpoint] <- 0
test_df$CPoints[test_df$CPoints >=cutpoint] <- 1
# write.xlsx(test_df, 'D:\\Data analysis\\Survival_analysis\\SYSU_Cancer_HCC\\result_sorting\\risk_layered\\clinical_dl_test.xlsx')
fml_KM<-survfit(TestSurv~CPoints,data=test_df)
x11()
ggsurvplot(fml_KM,surv.median.line = "hv",conf.int = TRUE,
legend.labs = c("low-risk", "high-risk"),pval=TRUE,
ylab="Survival probability (percentage)",xlab = " Time (Months)",
legend.title="Testing cohort")
# VALID KM
val_df$CPoints<-val_df$points
val_df$CPoints[val_df$CPoints <cutpoint] <- 0
val_df$CPoints[val_df$CPoints >=cutpoint] <- 1
# write.xlsx(val_df, 'D:\\Data analysis\\Survival_analysis\\SYSU_Cancer_HCC\\result_sorting\\risk_layered\\clinical_dl_val.xlsx')
fml_KM<-survfit(ExtSurv~CPoints,data=val_df)
x11()
ggsurvplot(fml_KM,surv.median.line = "hv",conf.int = TRUE,
legend.labs = c("low-risk", "high-risk"),pval=TRUE,
ylab="Survival probability (percentage)",xlab = " Time (Months)",
legend.title="Validation cohort")
survival = Survival(f_dl)
survival_5 = function(x) survival(24, x)
nom <- nomogram(f_dl,fun=list(survival_5),
funlabel = c("5 year survival"),
fun.at = c(0.05,seq(0.1,0.9,by=0.05),0.95), lp=FALSE)
plot(nom)
summary(f_multi)
#risk score
results <- formula_rd(nomogram = nom)
res.cut <- surv_cutpoint(train_df, time="time_event",event="label_event",variables =c("dl_ft"))
cutpoint<-res.cut$cutpoint[1,1]
cutpoint
library(gamlss)
install.packages("gamlss")
# install.packages("gamlss")
library(gamlss)
data(abdom)
m1 <- lms(y,x , data=abdom, n.cyc=30)
abdom
view(abdom)
View(CIN_ext)
View(abdom)
help(abdom)
help(lms)
help(lms)
data(abdom)
# install.packages("gamlss")
library(gamlss)
data(abdom)
#建立GAMLSS模型，自变量选择三项式，因变量选择正态分布
abd0 <- gamlss(y~poly(x,3), data=abdom, family=NO)
summary(abd0)    #查看模型详细信息
# 均值系数（mu）标准差（sigma）
abd1 <- gamlss(y~cs(x,df=3), data=abdom, family=NO)
summary(abd1)
predict(abd1,what="mu",type="response")[1]    #给出模型下，原始自变量x的相应估计值
#建立GAMLSS模型，自变量选择三次样条，标准差也选择三次样条，因变量选择正态分布
abd2 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), data=abdom, family=NO)
summary(abd1)
help(gamlss)
summary(abd2)
plot(abd2)
centiles(abd2,abdom$x)
help("centiles")
help(gamlss)
help("centiles")
centiles(abd2,abdom$x)
ggplot(abdom, aes(x=x, y=y)) +
geom_point(shape = 1, color = "#0052bb", size = 1.5) +
ggtitle("The Dutch boys data") +
xlab("age") + ylab("head circumference") +
theme_bw()
library(ggplot2) # ggplot
ggplot(abdom, aes(x=x, y=y)) +
geom_point(shape = 1, color = "#0052bb", size = 1.5) +
ggtitle("The Dutch boys data") +
xlab("age") + ylab("head circumference") +
theme_bw()
m0<-lms(y,x,families=c("BCCGo","BCPEo","BCTo"),data=abdom,
k=3,calibration=F, trans.x=T)
m0$family
m0$power
edfAll(m0)
plot(m0)
wp(m0)
abd0 <- gamlss(y~x, data=abdom, family=NO)
plot(abd0)
abd0 <- gamlss(y~poly(x,3), data=abdom, family=NO)
plot(abd0)
abd0 <- gamlss(y~poly(x,3), data=abdom, family=NO)
plot(abd0)
abd1 <- gamlss(y~poly(x,3), data=abdom, family=NO)
plot(abd1)
abd1 <- gamlss(y~cs(x,3), data=abdom, family=NO)
plot(abd1)
abd1 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), data=abdom, family=NO)
plot(abd1)
View(abd1)
plot(m0)
m0<-lms(y,x,families=c("BCCGo","BCPEo","BCTo"),data=abdom,
k=3,calibration=F, trans.x=T)
help(lms)
summary(m0)
abd2 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), mu.formula=~cs(x,3), data=abdom, family=NO)
abd1 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), data=abdom, family=NO)
plot(abd2)
abd0 <- gamlss(y~x, data=abdom, family=NO)
abd2 <- gamlss(y~cs(x,3), mu.formula=~cs(x,3), data=abdom, family=NO)
plot(abd2)
abd0 <- gamlss(y~x, data=abdom, family=NO)
plot(abd0)
abd1 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), data=abdom, family=NO)
plot(abd1)
abd1 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), data=abdom, family=NO)
plot(abd1)
abd2 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), nu.formula=~1, tau.formula=~1, data=abdom, family=NO)
plot(abd2)
abd2 <- gamlss(y~cs(x,3), sigma.formula=~cs(x,3), nu.formula=~1, tau.formula=~1, data=abdom, family=BCT)
plot(abd2)
plot(m0)
plot(abd0)
plot(abd1)
plot(abd2)
m0
View(m0)
help("plot")
plot(m0)
m0$call
abd3 <- gamlss(formula = y ~ pb(x), sigma.formula = ~pb(x), nu.formula = ~pb(x),
, tau.formula = ~pb(x), family = "BCTo", data = abdom)
plot(abd3)
help(lms)
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
help(cindex.comp)
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
####################################################################
# OS Train
train_df <- read.csv ("D:/Data analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/train_df_rfs.csv")
test_df <- read.csv ("D:/Data analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/test_df_rfs.csv")
val_df <- read.csv ("D:/Data analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/valid_df_rfs.csv")
train_df$label_event <- as.numeric(train_df$label_event)
train_df$time_event <- as.numeric(train_df$time_event)
test_df$label_event <- as.numeric(test_df$label_event)
test_df$time_event <- as.numeric(test_df$time_event)
val_df$label_event <- as.numeric(val_df$label_event)
val_df$time_event <- as.numeric(val_df$time_event)
train_df$time_event <- as.integer((train_df$time_event) / 30)
test_df$time_event <- as.integer((test_df$time_event) / 30)
val_df$time_event <- as.integer((val_df$time_event) / 30)
Traintime<-train_df$time_event;Trainevent<-train_df$label_event
Testtime<-test_df$time_event;Testevent<-test_df$label_event
Exttime<-val_df$time_event;Extevent<-val_df$label_event
TrainSurv<-Surv(Traintime,Trainevent)
TestSurv<-Surv(Testtime,Testevent)
ExtSurv<-Surv(Exttime,Extevent)
# Cox proportional hazards regression
cox_single <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df)
cox_muti <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df)
cox_dl <- coxph(Surv(time_event, label_event) ~ dl_ft, data = train_df)
dd <- datadist(train_df)
options(datadist = 'dd')
f_single <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_multi <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_dl <- cph(Surv(time_event, label_event) ~ dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
summary(cox_single)
summary(cox_muti)
summary(cox_dl)
# single
CIN_train <- survConcordance(TrainSurv~predict(cox_single,train_df))
CIN_test <- survConcordance(TestSurv~predict(cox_single,test_df))
CIN_ext <- survConcordance(ExtSurv~predict(cox_single,val_df))
# multi
CIN_train2 <- survConcordance(TrainSurv~predict(cox_muti,train_df))
CIN_test2 <- survConcordance(TestSurv~predict(cox_muti,test_df))
CIN_ext2 <- survConcordance(ExtSurv~predict(cox_muti,val_df))
# dl
CIN_train3 <- survConcordance(TrainSurv~predict(cox_dl,train_df))
CIN_test3 <- survConcordance(TestSurv~predict(cox_dl,test_df))
CIN_ext3 <- survConcordance(ExtSurv~predict(cox_dl,val_df))
# p VALUE
# TRAIN
train_pre=list()
train_pre$x=predict(cox_single, train_df)
Ctrain=list(c.index=CIN_train$concordance,n=CIN_train$n,se=CIN_train$std.err,data=list())
Ctrain$data=train_pre
train_pre2=list()
train_pre2$x=predict(cox_muti, train_df)
Ctrain2=list(c.index=CIN_train2$concordance,n=CIN_train2$n,se=CIN_train2$std.err,data=list())
Ctrain2$data=train_pre2
train_pre3=list()
train_pre3$x=predict(cox_dl, train_df)
Ctrain3=list(c.index=CIN_train3$concordance,n=CIN_train3$n,se=CIN_train3$std.err,data=list())
Ctrain3$data=train_pre3
# cindex.comp should put the better one in the first parameter
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
####################################################################
# OS Train
train_df <- read.csv ("D:/Data_analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/train_df_rfs.csv")
test_df <- read.csv ("D:/Data_analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/test_df_rfs.csv")
val_df <- read.csv ("D:/Data_analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/valid_df_rfs.csv")
train_df$label_event <- as.numeric(train_df$label_event)
train_df$time_event <- as.numeric(train_df$time_event)
test_df$label_event <- as.numeric(test_df$label_event)
test_df$time_event <- as.numeric(test_df$time_event)
val_df$label_event <- as.numeric(val_df$label_event)
val_df$time_event <- as.numeric(val_df$time_event)
train_df$time_event <- as.integer((train_df$time_event) / 30)
test_df$time_event <- as.integer((test_df$time_event) / 30)
val_df$time_event <- as.integer((val_df$time_event) / 30)
Traintime<-train_df$time_event;Trainevent<-train_df$label_event
Testtime<-test_df$time_event;Testevent<-test_df$label_event
Exttime<-val_df$time_event;Extevent<-val_df$label_event
TrainSurv<-Surv(Traintime,Trainevent)
TestSurv<-Surv(Testtime,Testevent)
ExtSurv<-Surv(Exttime,Extevent)
# Cox proportional hazards regression
cox_single <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df)
cox_muti <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df)
cox_dl <- coxph(Surv(time_event, label_event) ~ dl_ft, data = train_df)
dd <- datadist(train_df)
options(datadist = 'dd')
f_single <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_multi <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_dl <- cph(Surv(time_event, label_event) ~ dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
summary(cox_single)
summary(cox_muti)
summary(cox_dl)
# single
CIN_train <- survConcordance(TrainSurv~predict(cox_single,train_df))
CIN_test <- survConcordance(TestSurv~predict(cox_single,test_df))
CIN_ext <- survConcordance(ExtSurv~predict(cox_single,val_df))
# multi
CIN_train2 <- survConcordance(TrainSurv~predict(cox_muti,train_df))
CIN_test2 <- survConcordance(TestSurv~predict(cox_muti,test_df))
CIN_ext2 <- survConcordance(ExtSurv~predict(cox_muti,val_df))
# dl
CIN_train3 <- survConcordance(TrainSurv~predict(cox_dl,train_df))
CIN_test3 <- survConcordance(TestSurv~predict(cox_dl,test_df))
CIN_ext3 <- survConcordance(ExtSurv~predict(cox_dl,val_df))
# p VALUE
# TRAIN
train_pre=list()
train_pre$x=predict(cox_single, train_df)
Ctrain=list(c.index=CIN_train$concordance,n=CIN_train$n,se=CIN_train$std.err,data=list())
Ctrain$data=train_pre
train_pre2=list()
train_pre2$x=predict(cox_muti, train_df)
Ctrain2=list(c.index=CIN_train2$concordance,n=CIN_train2$n,se=CIN_train2$std.err,data=list())
Ctrain2$data=train_pre2
train_pre3=list()
train_pre3$x=predict(cox_dl, train_df)
Ctrain3=list(c.index=CIN_train3$concordance,n=CIN_train3$n,se=CIN_train3$std.err,data=list())
Ctrain3$data=train_pre3
View(Ctrain2)
help(survConcordance)
library("survival")
# install.packages("survminer")
library("survminer")
install.packages("xfun")
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
####################################################################
# OS Train
train_df <- read.csv ("D:/Data analysis/Survival_analysis/SYSU_Cancer_HCC/result_sorting/result/compare/train_df_os.csv")
####################################################################
# OS Train
train_df <- read.csv ("./result/compare/train_df_os.csv")
test_df <- read.csv ("./result/compare/test_df_os.csv")
val_df <- read.csv ("./result/compare/valid_df_os.csv")
train_df$label_event <- as.numeric(train_df$label_event)
train_df$time_event <- as.numeric(train_df$time_event)
test_df$label_event <- as.numeric(test_df$label_event)
test_df$time_event <- as.numeric(test_df$time_event)
val_df$label_event <- as.numeric(val_df$label_event)
val_df$time_event <- as.numeric(val_df$time_event)
train_df$time_event <- as.integer((train_df$time_event) / 30)
test_df$time_event <- as.integer((test_df$time_event) / 30)
val_df$time_event <- as.integer((val_df$time_event) / 30)
Traintime<-train_df$time_event;Trainevent<-train_df$label_event
Testtime<-test_df$time_event;Testevent<-test_df$label_event
Exttime<-val_df$time_event;Extevent<-val_df$label_event
TrainSurv<-Surv(Traintime,Trainevent)
TestSurv<-Surv(Testtime,Testevent)
ExtSurv<-Surv(Exttime,Extevent)
# Cox proportional hazards regression
cox_single <- coxph(Surv(time_event, label_event) ~ BCLC+Albumin, data = train_df)
cox_muti <- coxph(Surv(time_event, label_event) ~ BCLC+Albumin+dl_ft, data = train_df)
cox_dl <- coxph(Surv(time_event, label_event) ~ dl_ft, data = train_df)
dd <- datadist(train_df)
options(datadist = 'dd')
f_single <- cph(Surv(time_event, label_event) ~ BCLC+Albumin, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_multi <- cph(Surv(time_event, label_event) ~ BCLC+Albumin+dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_dl <- cph(Surv(time_event, label_event) ~ dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
summary(cox_single)
summary(cox_muti)
summary(cox_dl)
# single
CIN_train <- survConcordance(TrainSurv~predict(cox_single,train_df))
CIN_test <- survConcordance(TestSurv~predict(cox_single,test_df))
CIN_ext <- survConcordance(ExtSurv~predict(cox_single,val_df))
# multi
CIN_train2 <- survConcordance(TrainSurv~predict(cox_muti,train_df))
CIN_test2 <- survConcordance(TestSurv~predict(cox_muti,test_df))
CIN_ext2 <- survConcordance(ExtSurv~predict(cox_muti,val_df))
# dl
CIN_train3 <- survConcordance(TrainSurv~predict(cox_dl,train_df))
CIN_test3 <- survConcordance(TestSurv~predict(cox_dl,test_df))
CIN_ext3 <- survConcordance(ExtSurv~predict(cox_dl,val_df))
# p VALUE
# TRAIN
train_pre=list()
train_pre$x=predict(cox_single, train_df)
Ctrain=list(c.index=CIN_train$concordance,n=CIN_train$n,se=CIN_train$std.err,data=list())
Ctrain$data=train_pre
train_pre2=list()
train_pre2$x=predict(cox_muti, train_df)
Ctrain2=list(c.index=CIN_train2$concordance,n=CIN_train2$n,se=CIN_train2$std.err,data=list())
Ctrain2$data=train_pre2
train_pre3=list()
train_pre3$x=predict(cox_dl, train_df)
Ctrain3=list(c.index=CIN_train3$concordance,n=CIN_train3$n,se=CIN_train3$std.err,data=list())
Ctrain3$data=train_pre3
# cindex.comp should put the better one in the first parameter
p_train<-cindex.comp(Ctrain2, Ctrain)
print('p_train')
p_train
p_train2<-cindex.comp(Ctrain3, Ctrain)
print('p_train2')
p_train2
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
####################################################################
# OS Train
train_df <- read.csv ("./result/compare/train_df_rfs.csv")
test_df <- read.csv ("./result/compare/test_df_rfs.csv")
val_df <- read.csv ("./result/compare/valid_df_rfs.csv")
train_df$label_event <- as.numeric(train_df$label_event)
train_df$time_event <- as.numeric(train_df$time_event)
test_df$label_event <- as.numeric(test_df$label_event)
test_df$time_event <- as.numeric(test_df$time_event)
val_df$label_event <- as.numeric(val_df$label_event)
val_df$time_event <- as.numeric(val_df$time_event)
train_df$time_event <- as.integer((train_df$time_event) / 30)
test_df$time_event <- as.integer((test_df$time_event) / 30)
val_df$time_event <- as.integer((val_df$time_event) / 30)
Traintime<-train_df$time_event;Trainevent<-train_df$label_event
Testtime<-test_df$time_event;Testevent<-test_df$label_event
Exttime<-val_df$time_event;Extevent<-val_df$label_event
TrainSurv<-Surv(Traintime,Trainevent)
TestSurv<-Surv(Testtime,Testevent)
ExtSurv<-Surv(Exttime,Extevent)
# Cox proportional hazards regression
cox_single <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df)
cox_muti <- coxph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df)
cox_dl <- coxph(Surv(time_event, label_event) ~ dl_ft, data = train_df)
dd <- datadist(train_df)
options(datadist = 'dd')
f_single <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_multi <- cph(Surv(time_event, label_event) ~ BCLC+gender+Albumin+dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
dd <- datadist(train_df)
options(datadist = 'dd')
f_dl <- cph(Surv(time_event, label_event) ~ dl_ft, data = train_df, x=T, y=T, surv=T)#多变量
summary(cox_single)
summary(cox_muti)
summary(cox_dl)
# single
CIN_train <- survConcordance(TrainSurv~predict(cox_single,train_df))
CIN_test <- survConcordance(TestSurv~predict(cox_single,test_df))
CIN_ext <- survConcordance(ExtSurv~predict(cox_single,val_df))
# multi
CIN_train2 <- survConcordance(TrainSurv~predict(cox_muti,train_df))
CIN_test2 <- survConcordance(TestSurv~predict(cox_muti,test_df))
CIN_ext2 <- survConcordance(ExtSurv~predict(cox_muti,val_df))
# dl
CIN_train3 <- survConcordance(TrainSurv~predict(cox_dl,train_df))
CIN_test3 <- survConcordance(TestSurv~predict(cox_dl,test_df))
CIN_ext3 <- survConcordance(ExtSurv~predict(cox_dl,val_df))
# p VALUE
# TRAIN
train_pre=list()
train_pre$x=predict(cox_single, train_df)
Ctrain=list(c.index=CIN_train$concordance,n=CIN_train$n,se=CIN_train$std.err,data=list())
Ctrain$data=train_pre
train_pre2=list()
train_pre2$x=predict(cox_muti, train_df)
Ctrain2=list(c.index=CIN_train2$concordance,n=CIN_train2$n,se=CIN_train2$std.err,data=list())
Ctrain2$data=train_pre2
train_pre3=list()
train_pre3$x=predict(cox_dl, train_df)
Ctrain3=list(c.index=CIN_train3$concordance,n=CIN_train3$n,se=CIN_train3$std.err,data=list())
Ctrain3$data=train_pre3
# cindex.comp should put the better one in the first parameter
p_train<-cindex.comp(Ctrain2, Ctrain)
print('p_train')
p_train
p_train2<-cindex.comp(Ctrain3, Ctrain)
print('p_train2')
p_train2
library("survival")
# install.packages("survminer")
library("survminer")
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# library("BiocManager")
# BiocManager::install("survcomp")
# install.packages("nomogramFormula")
library(nomogramFormula)
library(survcomp)
library(rms)
library(Hmisc)
library(openxlsx)
####################################################################
# OS Train
train_df <- read.csv ("./result_sorting/result/compare/train_df_os.csv")
