import numpy as np
from matplotlib import pyplot as plt
import scipy.stats as st
from sklearn import metrics


class DelongTest():
    def __init__(self, preds1, preds2, label, threshold=0.05):
        '''
        preds1:the output of model1
        preds2:the output of model2
        label :the actual label
        '''
        self._preds1 = preds1
        self._preds2 = preds2
        self._label = label
        self.threshold = threshold
        self._show_result()

    def _auc(self, X, Y) -> float:
        return 1 / (len(X) * len(Y)) * sum([self._kernel(x, y) for x in X for y in Y])

    def _kernel(self, X, Y) -> float:
        '''
        Mann-Whitney statistic
        '''
        return .5 if Y == X else int(Y < X)

    def _structural_components(self, X, Y) -> list:
        V10 = [1 / len(Y) * sum([self._kernel(x, y) for y in Y]) for x in X]
        V01 = [1 / len(X) * sum([self._kernel(x, y) for x in X]) for y in Y]
        return V10, V01

    def _get_S_entry(self, V_A, V_B, auc_A, auc_B) -> float:
        return 1 / (len(V_A) - 1) * sum([(a - auc_A) * (b - auc_B) for a, b in zip(V_A, V_B)])

    def _z_score(self, var_A, var_B, covar_AB, auc_A, auc_B):
        return (auc_A - auc_B) / ((var_A + var_B - 2 * covar_AB) ** (.5) + 1e-8)

    def _group_preds_by_label(self, preds, actual) -> list:
        X = [p for (p, a) in zip(preds, actual) if a]
        Y = [p for (p, a) in zip(preds, actual) if not a]
        return X, Y

    def _compute_z_p(self):
        X_A, Y_A = self._group_preds_by_label(self._preds1, self._label)
        X_B, Y_B = self._group_preds_by_label(self._preds2, self._label)

        V_A10, V_A01 = self._structural_components(X_A, Y_A)
        V_B10, V_B01 = self._structural_components(X_B, Y_B)

        auc_A = self._auc(X_A, Y_A)
        auc_B = self._auc(X_B, Y_B)

        # Compute entries of covariance matrix S (covar_AB = covar_BA)
        var_A = (self._get_S_entry(V_A10, V_A10, auc_A, auc_A) * 1 / len(V_A10) + self._get_S_entry(V_A01, V_A01, auc_A,
                                                                                                    auc_A) * 1 / len(
            V_A01))
        var_B = (self._get_S_entry(V_B10, V_B10, auc_B, auc_B) * 1 / len(V_B10) + self._get_S_entry(V_B01, V_B01, auc_B,
                                                                                                    auc_B) * 1 / len(
            V_B01))
        covar_AB = (self._get_S_entry(V_A10, V_B10, auc_A, auc_B) * 1 / len(V_A10) + self._get_S_entry(V_A01, V_B01,
                                                                                                       auc_A,
                                                                                                       auc_B) * 1 / len(
            V_A01))

        # Two tailed test
        z = self._z_score(var_A, var_B, covar_AB, auc_A, auc_B)
        p = st.norm.sf(abs(z)) * 2

        return z, p

    def _show_result(self):
        z, p = self._compute_z_p()
        print(f"z score = {z:.5f};\np value = {p:.5f};")
        if p < self.threshold:
            print("There is a significant difference")
        else:
            print("There is NO significant difference")


# Model A (random) vs. "good" model B
# preds_A = np.array([.5, .5, .5, .5, .5, .5, .5, .5, .5, .5])
# preds_B = np.array([.2, .5, .1, .4, .9, .8, .7, .5, .9, .8])
# actual = np.array([0, 0, 0, 0, 1, 0, 1, 1, 1, 1])
# DelongTest(preds_A, preds_B, actual)


# clinic
# label_pred 140 [0.85, 0.85, 0.82, 0.67, 0.77, 0.74, 0.77, 0.85, 0.87, 0.85, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.87, 0.85, 0.52, 0.77, 0.85, 0.82, 0.85, 0.74, 0.85, 0.85, 0.85, 0.85, 0.85, 0.74, 0.85, 0.77, 0.85, 0.77, 0.85, 0.85, 0.85, 0.77, 0.85, 0.77, 0.87, 0.85, 0.52, 0.85, 0.67, 0.85, 0.77, 0.85, 0.52, 0.77, 0.85, 0.81, 0.85, 0.77, 0.85, 0.85, 0.85, 0.87, 0.52, 0.81, 0.85, 0.87, 0.67, 0.87, 0.87, 0.77, 0.85, 0.87, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.81, 0.77, 0.52, 0.77, 0.85, 0.85, 0.85, 0.77, 0.85, 0.85, 0.87, 0.77, 0.77, 0.67, 0.85, 0.77, 0.85, 0.85, 0.85, 0.77, 0.77, 0.77, 0.67, 0.74, 0.52, 0.77, 0.85, 0.67, 0.77, 0.77, 0.81, 0.85, 0.85, 0.74, 0.81, 0.77, 0.77, 0.85, 0.77, 0.85, 0.85, 0.85, 0.82, 0.77, 0.85, 0.85, 0.85, 0.85, 0.77, 0.77, 0.85, 0.77, 0.85, 0.85, 0.77, 0.85, 0.74, 0.85, 0.85, 0.85, 0.77, 0.81, 0.74, 0.77, 0.85, 0.85]
# label_gt 140 [0.96, 0.85, 1, 0.24, 1, 1, 1, 1, 1, 0.93, 0.59, 1, 1, 1, 1, 0.73, 1, 1, 1, 1, 1, 1, 0.53, 1, 0.71, 1, 1, 1, 1, 0.48, 1, 1, 1, 1, 1, 1, 1, 0.13, 1, 1, 1, 1, 0.27, 1, 1, 1, 1, 1, 0.57, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.27, 1, 1, 1, 1, 1, 1, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.58, 1, 0.77, 0.25, 1, 0.19, 0.84, 1, 1, 0.55, 0.36, 1, 1, 1, 1, 0.75, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.8, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# MR IMAGE + clinic
# label_pred 140 [0.74, 0.88, 0.86, 0.77, 0.88, 0.88, 0.87, 0.87, 0.88, 0.86, 0.77, 0.88, 0.86, 0.88, 0.87, 0.35, 0.88, 0.87, 0.56, 0.85, 0.87, 0.88, 0.82, 0.88, 0.73, 0.88, 0.88, 0.88, 0.84, 0.78, 0.88, 0.59, 0.82, 0.88, 0.88, 0.88, 0.87, 0.82, 0.88, 0.87, 0.88, 0.83, 0.88, 0.88, 0.88, 0.87, 0.8, 0.88, 0.74, 0.8, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.45, 0.88, 0.87, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.75, 0.88, 0.87, 0.87, 0.88, 0.82, 0.86, 0.77, 0.88, 0.88, 0.87, 0.87, 0.87, 0.88, 0.88, 0.84, 0.88, 0.71, 0.86, 0.88, 0.87, 0.88, 0.77, 0.88, 0.34, 0.73, 0.86, 0.75, 0.88, 0.77, 0.88, 0.87, 0.53, 0.86, 0.79, 0.86, 0.86, 0.57, 0.84, 0.88, 0.82, 0.88, 0.88, 0.88, 0.87, 0.87, 0.88, 0.74, 0.84, 0.88, 0.87, 0.88, 0.88, 0.84, 0.88, 0.88, 0.87, 0.71, 0.88, 0.88, 0.71, 0.88, 0.79, 0.88, 0.68, 0.87, 0.88, 0.85, 0.88, 0.88]
# label_gt 140 [0.96, 0.85, 1, 0.24, 1, 1, 1, 1, 1, 0.93, 0.59, 1, 1, 1, 1, 0.73, 1, 1, 1, 1, 1, 1, 0.53, 1, 0.71, 1, 1, 1, 1, 0.48, 1, 1, 1, 1, 1, 1, 1, 0.13, 1, 1, 1, 1, 0.27, 1, 1, 1, 1, 1, 0.57, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.27, 1, 1, 1, 1, 1, 1, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.58, 1, 0.77, 0.25, 1, 0.19, 0.84, 1, 1, 0.55, 0.36, 1, 1, 1, 1, 0.75, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.8, 1, 1, 1, 1, 1, 1, 1, 1, 1]

clinic = np.array([0.85, 0.85, 0.82, 0.67, 0.77, 0.74, 0.77, 0.85, 0.87, 0.85, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.87, 0.85, 0.52, 0.77, 0.85, 0.82, 0.85, 0.74, 0.85, 0.85, 0.85, 0.85, 0.85, 0.74, 0.85, 0.77, 0.85, 0.77, 0.85, 0.85, 0.85, 0.77, 0.85, 0.77, 0.87, 0.85, 0.52, 0.85, 0.67, 0.85, 0.77, 0.85, 0.52, 0.77, 0.85, 0.81, 0.85, 0.77, 0.85, 0.85, 0.85, 0.87, 0.52, 0.81, 0.85, 0.87, 0.67, 0.87, 0.87, 0.77, 0.85, 0.87, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.81, 0.77, 0.52, 0.77, 0.85, 0.85, 0.85, 0.77, 0.85, 0.85, 0.87, 0.77, 0.77, 0.67, 0.85, 0.77, 0.85, 0.85, 0.85, 0.77, 0.77, 0.77, 0.67, 0.74, 0.52, 0.77, 0.85, 0.67, 0.77, 0.77, 0.81, 0.85, 0.85, 0.74, 0.81, 0.77, 0.77, 0.85, 0.77, 0.85, 0.85, 0.85, 0.82, 0.77, 0.85, 0.85, 0.85, 0.85, 0.77, 0.77, 0.85, 0.77, 0.85, 0.85, 0.77, 0.85, 0.74, 0.85, 0.85, 0.85, 0.77, 0.81, 0.74, 0.77, 0.85, 0.85])
MR_IMAGE = np.array([0.74, 0.88, 0.86, 0.77, 0.88, 0.88, 0.87, 0.87, 0.88, 0.86, 0.77, 0.88, 0.86, 0.88, 0.87, 0.35, 0.88, 0.87, 0.56, 0.85, 0.87, 0.88, 0.82, 0.88, 0.73, 0.88, 0.88, 0.88, 0.84, 0.78, 0.88, 0.59, 0.82, 0.88, 0.88, 0.88, 0.87, 0.82, 0.88, 0.87, 0.88, 0.83, 0.88, 0.88, 0.88, 0.87, 0.8, 0.88, 0.74, 0.8, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.45, 0.88, 0.87, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.88, 0.75, 0.88, 0.87, 0.87, 0.88, 0.82, 0.86, 0.77, 0.88, 0.88, 0.87, 0.87, 0.87, 0.88, 0.88, 0.84, 0.88, 0.71, 0.86, 0.88, 0.87, 0.88, 0.77, 0.88, 0.34, 0.73, 0.86, 0.75, 0.88, 0.77, 0.88, 0.87, 0.53, 0.86, 0.79, 0.86, 0.86, 0.57, 0.84, 0.88, 0.82, 0.88, 0.88, 0.88, 0.87, 0.87, 0.88, 0.74, 0.84, 0.88, 0.87, 0.88, 0.88, 0.84, 0.88, 0.88, 0.87, 0.71, 0.88, 0.88, 0.71, 0.88, 0.79, 0.88, 0.68, 0.87, 0.88, 0.85, 0.88, 0.88])
actual = np.array([0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])
DelongTest(clinic, MR_IMAGE, actual)


